// Code generated by MockGen. DO NOT EDIT.
// Source: ./lucky_draw.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dao "github.com/foxdex/ftx-site/dao"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockILucky is a mock of ILucky interface.
type MockILucky struct {
	ctrl     *gomock.Controller
	recorder *MockILuckyMockRecorder
}

// MockILuckyMockRecorder is the mock recorder for MockILucky.
type MockILuckyMockRecorder struct {
	mock *MockILucky
}

// NewMockILucky creates a new mock instance.
func NewMockILucky(ctrl *gomock.Controller) *MockILucky {
	mock := &MockILucky{ctrl: ctrl}
	mock.recorder = &MockILuckyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILucky) EXPECT() *MockILuckyMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockILucky) Count(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockILuckyMockRecorder) Count(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockILucky)(nil).Count), db)
}

// CountByEmail mocks base method.
func (m *MockILucky) CountByEmail(db *gorm.DB, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmail", db, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmail indicates an expected call of CountByEmail.
func (mr *MockILuckyMockRecorder) CountByEmail(db, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmail", reflect.TypeOf((*MockILucky)(nil).CountByEmail), db, email)
}

// Create mocks base method.
func (m *MockILucky) Create(db *gorm.DB, model *dao.LuckyModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILuckyMockRecorder) Create(db, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILucky)(nil).Create), db, model)
}

// EmailExist mocks base method.
func (m *MockILucky) EmailExist(db *gorm.DB, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExist", db, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExist indicates an expected call of EmailExist.
func (mr *MockILuckyMockRecorder) EmailExist(db, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExist", reflect.TypeOf((*MockILucky)(nil).EmailExist), db, email)
}

// GetByEmail mocks base method.
func (m *MockILucky) GetByEmail(db *gorm.DB, email string) (*dao.LuckyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", db, email)
	ret0, _ := ret[0].(*dao.LuckyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockILuckyMockRecorder) GetByEmail(db, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockILucky)(nil).GetByEmail), db, email)
}

// Update mocks base method.
func (m *MockILucky) Update(db *gorm.DB, email string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, email, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockILuckyMockRecorder) Update(db, email, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockILucky)(nil).Update), db, email, updates)
}
